Найти продукты, у которых общая сумма продаж больше 30, но только за те дни, где сумма продаж меньше 20. Вывести только 2 таких продукта.

import java.time.LocalDate;

public class Sale {
    private String product;
    private int amount;
    private LocalDate date;

    public Sale(String product, int amount, LocalDate date) {
        this.product = product;
        this.amount = amount;
        this.date = date;
    }

    public String getProduct() {
        return product;
    }

    public int getAmount() {
        return amount;
    }

    public LocalDate getDate() {
        return date;
    }
}

1. Шаг 1. Найти даты где сумма продаж менее 20
2. Шаг 2: Отфильтровать продажи только за эти дни
3. Шаг 3: Сгруппировать по продуктам и отфильтровать те, у которых сумма > 30

import java.time.LocalDate;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        List<Sale> sales = Arrays.asList(
            new Sale("Apple", 10, LocalDate.of(2024, 1, 1)),
            new Sale("Banana", 5, LocalDate.of(2024, 1, 1)),
            new Sale("Apple", 15, LocalDate.of(2024, 1, 2)),
            new Sale("Banana", 8, LocalDate.of(2024, 1, 2)),
            new Sale("Apple", 20, LocalDate.of(2024, 1, 3)),
            new Sale("Banana", 12, LocalDate.of(2024, 1, 3)),
            new Sale("Apple", 5, LocalDate.of(2024, 1, 4)),
            new Sale("Banana", 10, LocalDate.of(2024, 1, 4))
        );

        Set<LocalDate> filteredDates = sales.stream()
            .collect(Collectors.groupingBy(Sale::getDate, Collectors.summingInt(Sale::getAmount)))
            .entrySet()
            .stream()
            .filter(e -> e.getValue() < 20)
            .map(Map.Entry::getKey)
            .collect(Collectors.toSet());


        List<String> result = findProducts(sales);
        System.out.println(result); // Вывод: [Apple]
    }

    public static List<String> findProducts(List<Sale> sales) {
        Map<LocalDate, Integer> preResult = new HashMap<>();
        for (Sale sale : sales) {
            LocalDate currentDate = sale.getLocalDate();
            Integer amount = sale.getAmount();
            if (preResult.get(currentDate).isEmpty) {
                preResult.put(currentDate, amount);
            } else {
                Integer oldAmount = preResult.get(currentDate);


                }

}

    }
}